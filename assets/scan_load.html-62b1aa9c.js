const n=JSON.parse(`{"key":"v-17b76b1c","path":"/techniques/coding/python/scan_load.html","title":"Scan and Load Dynamically","lang":"en-US","frontmatter":{"title":"Scan and Load Dynamically","date":"2024-01-20T00:00:00.000Z","author":"Haiyue","icon":"circle-dot","category":["python","scraping"],"star":false,"sticky":false,"description":"__init__.py from .base import base import os import importlib.util import sys import inspect import threading import copy class class_loader: _instance_lock = threading.Lock() def __init__(self): if hasattr(self, '_tag_'): return self._tag_ = dict() self.__load__() def __load__(self): ret = dict() filepath, _ = os.path.split(__file__) _, module_name = os.path.split(filepath) files = filter(lambda x: x.endswith('.py'), os.listdir(filepath)) files = filter(lambda x: not x.startswith('__'), files) files = filter(lambda x: not x.startswith('base'), files) #print(list(files)) for f in files: fullpath = os.path.join(filepath, f) name, __ = os.path.splitext(f) spec = importlib.util.spec_from_file_location(f'{module_name}.{name}', fullpath) mo = importlib.util.module_from_spec(spec) spec.loader.exec_module(mo) # get all classes in module mo clses = filter(lambda x: inspect.isclass(getattr(mo, x)), dir(mo)) # Get all classes derived from base clses = filter(lambda x: issubclass(getattr(mo, x), base) and not x=='base', clses) # Get all classes has class attribute TASK_NAME clses = filter(lambda x: hasattr(getattr(mo, x), 'TASK_NAME'), clses) for cls in clses: class_type = getattr(mo, cls) ret[class_type.TASK_NAME] = class_type self._tag_.update(ret) def getTaskMap(self): return copy.copy(self._tag_) #Single Class def __new__(cls, *args, **kwargs): if not hasattr(eval(cls.__name__), \\"_instance\\"): with eval(cls.__name__)._instance_lock: if not hasattr(eval(cls.__name__), \\"_instance\\"): eval(cls.__name__)._instance = object.__new__(cls) return eval(cls.__name__)._instance def __del__(self): pass def getTaskIns(task_name): tasks = class_loader().getTaskMap() if tasks.__contains__(task_name): return tasks[task_name]() return None ins = getTaskIns('Task-A') ins.say()","head":[["meta",{"property":"og:url","content":"https://seamice.github.io/blog/techniques/coding/python/scan_load.html"}],["meta",{"property":"og:site_name","content":"Haiyue's Blog"}],["meta",{"property":"og:title","content":"Scan and Load Dynamically"}],["meta",{"property":"og:description","content":"__init__.py from .base import base import os import importlib.util import sys import inspect import threading import copy class class_loader: _instance_lock = threading.Lock() def __init__(self): if hasattr(self, '_tag_'): return self._tag_ = dict() self.__load__() def __load__(self): ret = dict() filepath, _ = os.path.split(__file__) _, module_name = os.path.split(filepath) files = filter(lambda x: x.endswith('.py'), os.listdir(filepath)) files = filter(lambda x: not x.startswith('__'), files) files = filter(lambda x: not x.startswith('base'), files) #print(list(files)) for f in files: fullpath = os.path.join(filepath, f) name, __ = os.path.splitext(f) spec = importlib.util.spec_from_file_location(f'{module_name}.{name}', fullpath) mo = importlib.util.module_from_spec(spec) spec.loader.exec_module(mo) # get all classes in module mo clses = filter(lambda x: inspect.isclass(getattr(mo, x)), dir(mo)) # Get all classes derived from base clses = filter(lambda x: issubclass(getattr(mo, x), base) and not x=='base', clses) # Get all classes has class attribute TASK_NAME clses = filter(lambda x: hasattr(getattr(mo, x), 'TASK_NAME'), clses) for cls in clses: class_type = getattr(mo, cls) ret[class_type.TASK_NAME] = class_type self._tag_.update(ret) def getTaskMap(self): return copy.copy(self._tag_) #Single Class def __new__(cls, *args, **kwargs): if not hasattr(eval(cls.__name__), \\"_instance\\"): with eval(cls.__name__)._instance_lock: if not hasattr(eval(cls.__name__), \\"_instance\\"): eval(cls.__name__)._instance = object.__new__(cls) return eval(cls.__name__)._instance def __del__(self): pass def getTaskIns(task_name): tasks = class_loader().getTaskMap() if tasks.__contains__(task_name): return tasks[task_name]() return None ins = getTaskIns('Task-A') ins.say()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-01-20T02:44:15.000Z"}],["meta",{"property":"article:author","content":"Haiyue"}],["meta",{"property":"article:published_time","content":"2024-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-20T02:44:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Scan and Load Dynamically\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-20T02:44:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haiyue\\"}]}"]]},"headers":[],"git":{"createdTime":1705718655000,"updatedTime":1705718655000,"contributors":[{"name":"Haiyue","email":"nutterair1989@gmail.com","commits":1}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"techniques/coding/python/scan&load.md","localizedDate":"January 20, 2024","excerpt":"<p><code>__init__.py</code></p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">from</span> <span class=\\"token punctuation\\">.</span>base <span class=\\"token keyword\\">import</span> base\\n<span class=\\"token keyword\\">import</span> os\\n<span class=\\"token keyword\\">import</span> importlib<span class=\\"token punctuation\\">.</span>util\\n<span class=\\"token keyword\\">import</span> sys\\n<span class=\\"token keyword\\">import</span> inspect\\n<span class=\\"token keyword\\">import</span> threading\\n<span class=\\"token keyword\\">import</span> copy\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">class_loader</span><span class=\\"token punctuation\\">:</span>\\n    _instance_lock <span class=\\"token operator\\">=</span> threading<span class=\\"token punctuation\\">.</span>Lock<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token builtin\\">hasattr</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'_tag_'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">return</span>\\n        self<span class=\\"token punctuation\\">.</span>_tag_ <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">dict</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        self<span class=\\"token punctuation\\">.</span>__load__<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__load__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        ret <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">dict</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        filepath<span class=\\"token punctuation\\">,</span> _ <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span>__file__<span class=\\"token punctuation\\">)</span>\\n        _<span class=\\"token punctuation\\">,</span> module_name <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>split<span class=\\"token punctuation\\">(</span>filepath<span class=\\"token punctuation\\">)</span>\\n        \\n        files <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> x<span class=\\"token punctuation\\">.</span>endswith<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'.py'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> os<span class=\\"token punctuation\\">.</span>listdir<span class=\\"token punctuation\\">(</span>filepath<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        files <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">not</span> x<span class=\\"token punctuation\\">.</span>startswith<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'__'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> files<span class=\\"token punctuation\\">)</span>\\n        files <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">not</span> x<span class=\\"token punctuation\\">.</span>startswith<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'base'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> files<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token comment\\">#print(list(files))</span>\\n        <span class=\\"token keyword\\">for</span> f <span class=\\"token keyword\\">in</span> files<span class=\\"token punctuation\\">:</span>\\n            fullpath <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>join<span class=\\"token punctuation\\">(</span>filepath<span class=\\"token punctuation\\">,</span> f<span class=\\"token punctuation\\">)</span>\\n            name<span class=\\"token punctuation\\">,</span> __ <span class=\\"token operator\\">=</span> os<span class=\\"token punctuation\\">.</span>path<span class=\\"token punctuation\\">.</span>splitext<span class=\\"token punctuation\\">(</span>f<span class=\\"token punctuation\\">)</span>\\n            spec <span class=\\"token operator\\">=</span> importlib<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>spec_from_file_location<span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f'</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>module_name<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">.</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>name<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">'</span></span><span class=\\"token punctuation\\">,</span> fullpath<span class=\\"token punctuation\\">)</span>\\n            mo <span class=\\"token operator\\">=</span> importlib<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>module_from_spec<span class=\\"token punctuation\\">(</span>spec<span class=\\"token punctuation\\">)</span>\\n            spec<span class=\\"token punctuation\\">.</span>loader<span class=\\"token punctuation\\">.</span>exec_module<span class=\\"token punctuation\\">(</span>mo<span class=\\"token punctuation\\">)</span>\\n            \\n            <span class=\\"token comment\\"># get all classes in module mo</span>\\n            clses <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> inspect<span class=\\"token punctuation\\">.</span>isclass<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">getattr</span><span class=\\"token punctuation\\">(</span>mo<span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">dir</span><span class=\\"token punctuation\\">(</span>mo<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token comment\\"># Get all classes derived from base</span>\\n            clses <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">issubclass</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">getattr</span><span class=\\"token punctuation\\">(</span>mo<span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> base<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">and</span> <span class=\\"token keyword\\">not</span> x<span class=\\"token operator\\">==</span><span class=\\"token string\\">'base'</span><span class=\\"token punctuation\\">,</span> clses<span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token comment\\"># Get all classes has class attribute TASK_NAME</span>\\n            clses <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">hasattr</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">getattr</span><span class=\\"token punctuation\\">(</span>mo<span class=\\"token punctuation\\">,</span> x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'TASK_NAME'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> clses<span class=\\"token punctuation\\">)</span>\\n            \\n            <span class=\\"token keyword\\">for</span> cls <span class=\\"token keyword\\">in</span> clses<span class=\\"token punctuation\\">:</span>\\n                class_type <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">getattr</span><span class=\\"token punctuation\\">(</span>mo<span class=\\"token punctuation\\">,</span> cls<span class=\\"token punctuation\\">)</span>\\n                ret<span class=\\"token punctuation\\">[</span>class_type<span class=\\"token punctuation\\">.</span>TASK_NAME<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> class_type\\n        self<span class=\\"token punctuation\\">.</span>_tag_<span class=\\"token punctuation\\">.</span>update<span class=\\"token punctuation\\">(</span>ret<span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">getTaskMap</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> copy<span class=\\"token punctuation\\">.</span>copy<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">.</span>_tag_<span class=\\"token punctuation\\">)</span>\\n    \\n    <span class=\\"token comment\\">#Single Class</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__new__</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">*</span>args<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">**</span>kwargs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> <span class=\\"token builtin\\">hasattr</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">.</span>__name__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"_instance\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">with</span> <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">.</span>__name__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>_instance_lock<span class=\\"token punctuation\\">:</span>\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token keyword\\">not</span> <span class=\\"token builtin\\">hasattr</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">.</span>__name__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"_instance\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n                    <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">.</span>__name__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>_instance <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">object</span><span class=\\"token punctuation\\">.</span>__new__<span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token builtin\\">eval</span><span class=\\"token punctuation\\">(</span>cls<span class=\\"token punctuation\\">.</span>__name__<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>_instance\\n    \\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__del__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">pass</span>\\n\\n\\n<span class=\\"token keyword\\">def</span> <span class=\\"token function\\">getTaskIns</span><span class=\\"token punctuation\\">(</span>task_name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    tasks <span class=\\"token operator\\">=</span> class_loader<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>getTaskMap<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">if</span> tasks<span class=\\"token punctuation\\">.</span>__contains__<span class=\\"token punctuation\\">(</span>task_name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">return</span> tasks<span class=\\"token punctuation\\">[</span>task_name<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">None</span>\\n        \\n        \\n        \\nins <span class=\\"token operator\\">=</span> getTaskIns<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Task-A'</span><span class=\\"token punctuation\\">)</span>\\nins<span class=\\"token punctuation\\">.</span>say<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
