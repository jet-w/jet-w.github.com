import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p}from"./app-9d1b8310.js";const t={},e=p(`<p><code>__init__.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span>base <span class="token keyword">import</span> base
<span class="token keyword">import</span> os
<span class="token keyword">import</span> importlib<span class="token punctuation">.</span>util
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> inspect
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> copy

<span class="token keyword">class</span> <span class="token class-name">class_loader</span><span class="token punctuation">:</span>
    _instance_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">&#39;_tag_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>
        self<span class="token punctuation">.</span>_tag_ <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__load__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">__load__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        filepath<span class="token punctuation">,</span> _ <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
        _<span class="token punctuation">,</span> module_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>
        
        files <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">)</span>
        files <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">not</span> x<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span>
        files <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token keyword">not</span> x<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> files<span class="token punctuation">)</span>
        <span class="token comment">#print(list(files))</span>
        <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>
            fullpath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
            name<span class="token punctuation">,</span> __ <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
            spec <span class="token operator">=</span> importlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>spec_from_file_location<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>module_name<span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">,</span> fullpath<span class="token punctuation">)</span>
            mo <span class="token operator">=</span> importlib<span class="token punctuation">.</span>util<span class="token punctuation">.</span>module_from_spec<span class="token punctuation">(</span>spec<span class="token punctuation">)</span>
            spec<span class="token punctuation">.</span>loader<span class="token punctuation">.</span>exec_module<span class="token punctuation">(</span>mo<span class="token punctuation">)</span>
            
            <span class="token comment"># get all classes in module mo</span>
            clses <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> inspect<span class="token punctuation">.</span>isclass<span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>mo<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dir</span><span class="token punctuation">(</span>mo<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># Get all classes derived from base</span>
            clses <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">issubclass</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>mo<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> base<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> x<span class="token operator">==</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">,</span> clses<span class="token punctuation">)</span>
            <span class="token comment"># Get all classes has class attribute TASK_NAME</span>
            clses <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token builtin">getattr</span><span class="token punctuation">(</span>mo<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;TASK_NAME&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clses<span class="token punctuation">)</span>
            
            <span class="token keyword">for</span> cls <span class="token keyword">in</span> clses<span class="token punctuation">:</span>
                class_type <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>mo<span class="token punctuation">,</span> cls<span class="token punctuation">)</span>
                ret<span class="token punctuation">[</span>class_type<span class="token punctuation">.</span>TASK_NAME<span class="token punctuation">]</span> <span class="token operator">=</span> class_type
        self<span class="token punctuation">.</span>_tag_<span class="token punctuation">.</span>update<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    
    <span class="token keyword">def</span> <span class="token function">getTaskMap</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_tag_<span class="token punctuation">)</span>
    
    <span class="token comment">#Single Class</span>
    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;_instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">.</span>_instance_lock<span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;_instance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token builtin">eval</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">object</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">.</span>_instance
    
    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>


<span class="token keyword">def</span> <span class="token function">getTaskIns</span><span class="token punctuation">(</span>task_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tasks <span class="token operator">=</span> class_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getTaskMap<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> tasks<span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span>task_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> tasks<span class="token punctuation">[</span>task_name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">None</span>
        
        
        
ins <span class="token operator">=</span> getTaskIns<span class="token punctuation">(</span><span class="token string">&#39;Task-A&#39;</span><span class="token punctuation">)</span>
ins<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>a.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span>base <span class="token keyword">import</span> base
dd <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    TASK_NAME <span class="token operator">=</span> <span class="token string">&#39;Task-A&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span>
        
    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;say class </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
        

<span class="token keyword">class</span> <span class="token class-name">D</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    TASK_NAME <span class="token operator">=</span> <span class="token string">&#39;Task-D&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> <span class="token string">&#39;D&#39;</span>
        
    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;say class </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">E</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    TASK_NAME <span class="token operator">=</span> <span class="token string">&#39;Task-D&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> <span class="token string">&#39;E&#39;</span>
        
    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;say class </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>b.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span>base <span class="token keyword">import</span> base

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    TASK_NAME <span class="token operator">=</span> <span class="token string">&#39;Task-B&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
        
    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;say class </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","scan_load.html.vue"]]);export{r as default};
