import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as t,o as a}from"./app-CxoTr4qs.js";const i={};function c(l,e){return a(),r("div",null,e[0]||(e[0]=[t('<h2 id="dockerfile-basic" tabindex="-1"><a class="header-anchor" href="#dockerfile-basic"><span>Dockerfile Basic</span></a></h2><h3 id="basic-rules" tabindex="-1"><a class="header-anchor" href="#basic-rules"><span>Basic Rules</span></a></h3><ul><li>Every reserved words command need to use upper case and follow at least one argument</li><li>The commands are executed from top to bottom as order.</li><li><code>#</code> means comment</li><li>Every command will create a image layer to commit to final image.</li></ul><h3 id="how-the-docker-parse-dockerfile" tabindex="-1"><a class="header-anchor" href="#how-the-docker-parse-dockerfile"><span>How the docker parse Dockerfile</span></a></h3><ol><li>docker to run a container from a basic image</li><li>execute a command to modify container</li><li>execute a command similar with <code>docker commit</code> to commit a new image layer.</li><li>docker to run a container based on the commited image.</li><li>execute the next command untill finish all the commands.</li></ol><h3 id="reserved-words" tabindex="-1"><a class="header-anchor" href="#reserved-words"><span>Reserved Words</span></a></h3><ul><li><code>FROM</code>: specify the basic image as template, normally it&#39;s the first command</li><li><code>MAINTAINER</code>: the maintainer&#39;s info, name and email</li><li><code>RUN</code>: execute commands during building docker image<br> SHELL: <code>RUN yum install vim</code><br> EXEC: <code>RUN [&quot;execute file&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li><li><code>EXPOSE</code>: Expose port to outside</li><li><code>WORKDIR</code>: Specify the working directory after creating a container.</li><li><code>USER</code>: Specify the user need to execute, default is root</li><li><code>ENV</code>: Setup the environment variables during building.<br><code>ENV MY_PATH /root</code></li><li><code>VOLUME</code>: Container volume</li><li><code>ADD</code>: copy host file to docker, the url can be processed automatically, and tar file will be decompressed automatically also.</li><li><code>COPY</code>: copy host file to docker</li><li><code>CMD</code>: Specify the commands that need to be executed after run a container.<br> ::: notes<br> The <code>CMD</code> can appear multiple times, but only the last one is valid. And it will be replaced by docker run command<br> :::</li><li><code>ENTRYPOINT</code>: <ul><li>To specify a command when a container startup.</li><li>Similar with <code>CMD</code>, but it can not be overwritten by docker run <code>commands</code>, and the <code>commands</code> will be the parameters to the script and specified by <code>ENTRYPOINT</code>.</li></ul></li></ul><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ol><li><a href="https://www.youtube.com/watch?v=jZ5zjm2_n_4&amp;list=PLmOn9nNkQxJFtOGw9fsoLHgtCxcki7TtK&amp;index=57" target="_blank" rel="noopener noreferrer">Tutoriaspoint</a></li><li><a href="https://www.runoob.com/docker/docker-dockerfile.html" target="_blank" rel="noopener noreferrer">Docker Dockerfile on runoob</a></li><li><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">Dockerfile reference (official)</a></li></ol>',9)]))}const s=o(i,[["render",c],["__file","04.DockerFile.html.vue"]]),m=JSON.parse(`{"path":"/techniques/Tools/docker/04.DockerFile.html","title":"04. Dockerfile","lang":"en-US","frontmatter":{"title":"04. Dockerfile","date":"2024-07-09T00:00:00.000Z","icon":"circle-dot","author":"Haiyue","category":["docker"],"tag":["docker"],"star":true,"sticky":true,"description":"Dockerfile Basic Basic Rules Every reserved words command need to use upper case and follow at least one argument The commands are executed from top to bottom as order. # means ...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://jet-w.github.io/techniques/Tools/docker/04.DockerFile.html"}],["meta",{"property":"og:site_name","content":"Haiyue's Blog"}],["meta",{"property":"og:title","content":"04. Dockerfile"}],["meta",{"property":"og:description","content":"Dockerfile Basic Basic Rules Every reserved words command need to use upper case and follow at least one argument The commands are executed from top to bottom as order. # means ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:author","content":"Haiyue"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:published_time","content":"2024-07-09T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04. Dockerfile\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-09T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haiyue\\"}]}"]]},"headers":[{"level":2,"title":"Dockerfile Basic","slug":"dockerfile-basic","link":"#dockerfile-basic","children":[{"level":3,"title":"Basic Rules","slug":"basic-rules","link":"#basic-rules","children":[]},{"level":3,"title":"How the docker parse Dockerfile","slug":"how-the-docker-parse-dockerfile","link":"#how-the-docker-parse-dockerfile","children":[]},{"level":3,"title":"Reserved Words","slug":"reserved-words","link":"#reserved-words","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"readingTime":{"minutes":1.08,"words":324},"filePathRelative":"techniques/Tools/docker/04.DockerFile.md","localizedDate":"July 9, 2024","excerpt":"<h2>Dockerfile Basic</h2>\\n<h3>Basic Rules</h3>\\n<ul>\\n<li>Every reserved words command need to use upper case and follow at least one argument</li>\\n<li>The commands are executed from top to bottom as order.</li>\\n<li><code>#</code> means comment</li>\\n<li>Every command will create a image layer to commit to final image.</li>\\n</ul>","autoDesc":true}`);export{s as comp,m as data};
