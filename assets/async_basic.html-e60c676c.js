const n=JSON.parse(`{"key":"v-34272342","path":"/techniques/coding/python/async/async_basic.html","title":"Nature of Async","lang":"en-US","frontmatter":{"title":"Nature of Async","date":"2024-07-10T00:00:00.000Z","author":"Haiyue","icon":"circle-dot","category":["python","env"],"star":false,"sticky":false,"description":"The nature of Async The nature of Async is an Event Loop. The result is a coroutine object after invoke a async function. The function can only be executed after becoming a task. Basic 1 import asyncio import time async def say_after(delay, what): await asyncio.sleep(delay) return f\\"{what} - {delay}\\" async def main(): print(f\\"started at {time.strftime(\\"%X\\")}\\") await say_after(1, \\"hello\\") await say_after(2, \\"world\\") print(f\\"finished at {time.strftime(\\"%X\\")}\\") asyncio.run(main())","head":[["meta",{"property":"og:url","content":"https://jet-w.github.io/techniques/coding/python/async/async_basic.html"}],["meta",{"property":"og:site_name","content":"Haiyue's Blog"}],["meta",{"property":"og:title","content":"Nature of Async"}],["meta",{"property":"og:description","content":"The nature of Async The nature of Async is an Event Loop. The result is a coroutine object after invoke a async function. The function can only be executed after becoming a task. Basic 1 import asyncio import time async def say_after(delay, what): await asyncio.sleep(delay) return f\\"{what} - {delay}\\" async def main(): print(f\\"started at {time.strftime(\\"%X\\")}\\") await say_after(1, \\"hello\\") await say_after(2, \\"world\\") print(f\\"finished at {time.strftime(\\"%X\\")}\\") asyncio.run(main())"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-10T12:00:28.000Z"}],["meta",{"property":"article:author","content":"Haiyue"}],["meta",{"property":"article:published_time","content":"2024-07-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-10T12:00:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nature of Async\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-10T12:00:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haiyue\\"}]}"]]},"headers":[{"level":2,"title":"The nature of Async","slug":"the-nature-of-async","link":"#the-nature-of-async","children":[{"level":3,"title":"Basic 1","slug":"basic-1","link":"#basic-1","children":[]},{"level":3,"title":"Basic 2","slug":"basic-2","link":"#basic-2","children":[]},{"level":3,"title":"Basic 3","slug":"basic-3","link":"#basic-3","children":[]}]},{"level":2,"title":"Another way to run","slug":"another-way-to-run","link":"#another-way-to-run","children":[]}],"git":{"createdTime":1720612828000,"updatedTime":1720612828000,"contributors":[{"name":"Jet","email":"nutterair1989@gmail.com","commits":1}]},"readingTime":{"minutes":0.68,"words":203},"filePathRelative":"techniques/coding/python/async/async_basic.md","localizedDate":"July 10, 2024","excerpt":"<h2> The nature of Async</h2>\\n<p>The nature of Async is an Event Loop.</p>\\n<p>The result is a coroutine object after invoke a <code>async</code> function. The function can only be executed after becoming a task.</p>\\n<h3> Basic 1</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> asyncio\\n<span class=\\"token keyword\\">import</span> time\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">say_after</span><span class=\\"token punctuation\\">(</span>delay<span class=\\"token punctuation\\">,</span> what<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token keyword\\">await</span> asyncio<span class=\\"token punctuation\\">.</span>sleep<span class=\\"token punctuation\\">(</span>delay<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"</span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>what<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\"> - </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>delay<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">\\"</span></span>\\n\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"started at {time.strftime(\\"</span></span><span class=\\"token operator\\">%</span>X<span class=\\"token string\\">\\")}\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">await</span> say_after<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"hello\\"</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">await</span> say_after<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"world\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n  <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"finished at {time.strftime(\\"</span></span><span class=\\"token operator\\">%</span>X<span class=\\"token string\\">\\")}\\"</span><span class=\\"token punctuation\\">)</span>\\n\\nasyncio<span class=\\"token punctuation\\">.</span>run<span class=\\"token punctuation\\">(</span>main<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
