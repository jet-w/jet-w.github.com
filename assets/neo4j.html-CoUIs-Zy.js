import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o}from"./app-B8uDJgka.js";const n={};function l(s,e){return o(),a("div",null,e[0]||(e[0]=[t('<h2 id="refactor-noun-camel-caseverb-upper-caseproperty-lower-case" tabindex="-1"><a class="header-anchor" href="#refactor-noun-camel-caseverb-upper-caseproperty-lower-case"><span>Refactor /<br> Noun : Camel Case<br> Verb : Upper Case<br> Property: Lower Case</span></a></h2><p>-- Query All and Delete<br> MATCH (n) DETACH DELETE n;</p><hr><p>-- Creating three movies and four actors<br> MERGE (:Movie {title: &#39;Apollo 13&#39;, tmdbId: 568, released: &#39;1995-06-30&#39;, imdbRating: 7.6, genres: [&#39;Drama&#39;, &#39;Adventure&#39;, &#39;IMAX&#39;]})<br> MERGE (:Person {name: &#39;Tom Hanks&#39;, tmdbId: 31, born: &#39;1956-07-09&#39;})<br> MERGE (:Person {name: &#39;Meg Ryan&#39;, tmdbId: 5344, born: &#39;1961-11-19&#39;})<br> MERGE (:Person {name: &#39;Danny DeVito&#39;, tmdbId: 518, born: &#39;1944-11-17&#39;})<br> MERGE (:Person {name: &#39;Jack Nicholson&#39;, tmdbId: 514, born: &#39;1937-04-22&#39;})<br> MERGE (:Movie {title: &#39;Sleepless in Seattle&#39;, tmdbId: 858, released: &#39;1993-06-25&#39;, imdbRating: 6.8, genres: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]})<br> MERGE (:Movie {title: &#39;Hoffa&#39;, tmdbId: 10410, released: &#39;1992-12-25&#39;, imdbRating: 6.6, genres: [&#39;Crime&#39;, &#39;Drama&#39;]})</p><hr><p>-- Add two users<br> MERGE (:User {name: &#39;Sandy Jones&#39;, userId: 534})<br> MERGE (:User {name: &#39;Clinton Spencer&#39;, userId: 105})</p><hr><p>-- Creating relationship</p><p>MATCH (apollo:Movie {title: &#39;Apollo 13&#39;})<br> MATCH (tom:Person {name: &#39;Tom Hanks&#39;})<br> MATCH (meg:Person {name: &#39;Meg Ryan&#39;})<br> MATCH (danny:Person {name: &#39;Danny DeVito&#39;})<br> MATCH (sleep:Movie {title: &#39;Sleepless in Seattle&#39;})<br> MATCH (hoffa:Movie {title: &#39;Hoffa&#39;})<br> MATCH (jack:Person {name: &#39;Jack Nicholson&#39;})</p><p>// create the relationships between nodes<br> MERGE (tom)-[:ACTED_IN {role: &#39;Jim Lovell&#39;}]-&gt;(apollo)<br> MERGE (tom)-[:ACTED_IN {role: &#39;Sam Baldwin&#39;}]-&gt;(sleep)<br> MERGE (meg)-[:ACTED_IN {role: &#39;Annie Reed&#39;}]-&gt;(sleep)<br> MERGE (danny)-[:ACTED_IN {role: &#39;Bobby Ciaro&#39;}]-&gt;(hoffa)<br> MERGE (danny)-[:DIRECTED]-&gt;(hoffa)<br> MERGE (jack)-[:ACTED_IN {role: &#39;Jimmy Hoffa&#39;}]-&gt;(hoffa)</p><hr><p>-- Query all data<br> MATCH (n) RETURN n</p><hr><p>-- Conditional Query<br> MATCH (p:Person)-[:ACTED_IN]-(m:Movie)<br> WHERE m.title = &#39;Sleepless in Seattle&#39;<br> RETURN <a href="http://p.name" target="_blank" rel="noopener noreferrer">p.name</a> AS Actor</p><p>MATCH (u:User)-[:RATED]-(m:Movie)<br> WHERE m.title = &#39;Apollo 13&#39;<br> RETURN count(*) AS <code>Number of reviewers</code></p><p>MATCH (p:Person)-[:ACTED_IN]-(m:Movie)<br> WHERE m.title = &#39;Hoffa&#39;<br> RETURN <a href="http://p.name" target="_blank" rel="noopener noreferrer">p.name</a> AS Actor, p.born as <code>Year Born</code> ORDER BY p.born DESC LIMIT 1</p><hr><p>-- Label Data<br> MATCH (p:Person)<br> WHERE exists ((p)-[:ACTED_IN]-())<br> SET p:Actor</p><hr><p>-- PROFILE<br> PROFILE MATCH (p:Person)-[:ACTED_IN]-()<br> WHERE p.born &lt; &#39;1950&#39;<br> RETURN <a href="http://p.name" target="_blank" rel="noopener noreferrer">p.name</a></p><hr><p>-- Modify Nodes<br> MATCH (apollo:Movie {title: &#39;Apollo 13&#39;, tmdbId: 568, released: &#39;1995-06-30&#39;, imdbRating: 7.6, genres: [&#39;Drama&#39;, &#39;Adventure&#39;, &#39;IMAX&#39;]})<br> MATCH (sleep:Movie {title: &#39;Sleepless in Seattle&#39;, tmdbId: 858, released: &#39;1993-06-25&#39;, imdbRating: 6.8, genres: [&#39;Comedy&#39;, &#39;Drama&#39;, &#39;Romance&#39;]})<br> MATCH (hoffa:Movie {title: &#39;Hoffa&#39;, tmdbId: 10410, released: &#39;1992-12-25&#39;, imdbRating: 6.6, genres: [&#39;Crime&#39;, &#39;Drama&#39;]})<br> MATCH (casino:Movie {title: &#39;Casino&#39;, tmdbId: 524, released: &#39;1995-11-22&#39;, imdbRating: 8.2, genres: [&#39;Drama&#39;,&#39;Crime&#39;]})<br> SET apollo.languages = [&#39;English&#39;]<br> SET sleep.languages = [&#39;English&#39;]<br> SET hoffa.languages = [&#39;English&#39;, &#39;Italian&#39;, &#39;Latin&#39;]<br> SET casino.languages = [&#39;English&#39;]</p><hr><p>-- This code iterates through all Movie nodes and creates a Language node for each language it finds and then creates the relationship between the Movie node and Language node using the IN_LANGUAGE relationship. It uses the Cypher UNWIND clause to separate each element of the languages property list into a separate row value that is processed later in the query.<br> MATCH (m:Movie)<br> UNWIND m.languages AS language<br> WITH language, collect(m) AS movies<br> MERGE (l:Language {name:language})<br> WITH l, movies<br> UNWIND movies AS m<br> WITH l,m<br> MERGE (m)-[:IN_LANGUAGE]-&gt;(l);<br> MATCH (m:Movie)<br> SET m.languages = null</p><hr><p>-- Create Specialized Relationship<br> MATCH (n:Actor)-[:ACTED_IN]-&gt;(m:Movie)<br> CALL apoc.merge.relationship(n,<br> &#39;ACTED_IN_&#39; + left(m.released,4),<br> {},<br> {},<br> m ,<br> {}<br> ) YIELD rel<br> RETURN count(*) AS <code>Number of relationships merged</code>;</p>',26)]))}const m=r(n,[["render",l],["__file","neo4j.html.vue"]]),b=JSON.parse(`{"path":"/techniques/Database/neo4j.html","title":"Neo4j","lang":"en-US","frontmatter":{"title":"Neo4j","icon":"circle-dot","date":"2024-11-17T00:00:00.000Z","category":["graph DB"],"description":"Refactor / Noun : Camel Case Verb : Upper Case Property: Lower Case -- Query All and Delete MATCH (n) DETACH DELETE n; -- Creating three movies and four actors MERGE (:Movie {ti...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://jet-w.github.io/techniques/Database/neo4j.html"}],["meta",{"property":"og:site_name","content":"Haiyue's Blog"}],["meta",{"property":"og:title","content":"Neo4j"}],["meta",{"property":"og:description","content":"Refactor / Noun : Camel Case Verb : Upper Case Property: Lower Case -- Query All and Delete MATCH (n) DETACH DELETE n; -- Creating three movies and four actors MERGE (:Movie {ti..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:published_time","content":"2024-11-17T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Neo4j\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-17T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haiyue\\",\\"url\\":\\"https://jet-w.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"Refactor /Noun    :  Camel CaseVerb    : Upper CaseProperty: Lower Case","slug":"refactor-noun-camel-caseverb-upper-caseproperty-lower-case","link":"#refactor-noun-camel-caseverb-upper-caseproperty-lower-case","children":[]}],"readingTime":{"minutes":1.78,"words":533},"filePathRelative":"techniques/Database/neo4j.md","localizedDate":"November 17, 2024","excerpt":"<h2>Refactor /<br>\\nNoun    :  Camel Case<br>\\nVerb    : Upper Case<br>\\nProperty: Lower Case</h2>\\n<p>-- Query All and Delete<br>\\nMATCH (n) DETACH DELETE n;</p>\\n<hr>\\n<p>-- Creating three movies and four actors<br>\\nMERGE (:Movie {title: 'Apollo 13', tmdbId: 568, released: '1995-06-30', imdbRating: 7.6, genres: ['Drama', 'Adventure', 'IMAX']})<br>\\nMERGE (:Person {name: 'Tom Hanks', tmdbId: 31, born: '1956-07-09'})<br>\\nMERGE (:Person {name: 'Meg Ryan', tmdbId: 5344, born: '1961-11-19'})<br>\\nMERGE (:Person {name: 'Danny DeVito', tmdbId: 518, born: '1944-11-17'})<br>\\nMERGE (:Person {name: 'Jack Nicholson', tmdbId: 514, born: '1937-04-22'})<br>\\nMERGE (:Movie {title: 'Sleepless in Seattle', tmdbId: 858, released: '1993-06-25', imdbRating: 6.8, genres: ['Comedy', 'Drama', 'Romance']})<br>\\nMERGE (:Movie {title: 'Hoffa', tmdbId: 10410, released: '1992-12-25', imdbRating: 6.6, genres: ['Crime', 'Drama']})</p>","autoDesc":true}`);export{m as comp,b as data};
